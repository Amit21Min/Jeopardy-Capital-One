{"version":3,"sources":["components/Homepage.js","components/SearchPage.js","components/BuildResults.js","components/Results.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["Homepage","className","to","React","Component","SearchPage","props","handleSubmit","event","preventDefault","fetchResults","state","value","category","minDate","maxDate","offset","handleInputChange","setState","target","name","href","type","placeholder","onChange","this","onSubmit","BuildResults","Difficulty","Category","Question","Answer","Air_Date","split","Results","results","undefined","length","map","result","i","key","title","question","answer","airdate","toString","ID","id","Error","App","buildStr","console","log","require","fetch","then","res","json","d","jsonData","catch","basename","process","Fragment","path","exact","strict","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a6157b1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport './Homepage.css';\r\n\r\nexport default class Homepage extends React.Component {\r\n    render() {\r\n        const name = \"Amit\"\r\n        return (\r\n            <body className=\"body\">\r\n\r\n                <div>\r\n                    <div className=\"header\">\r\n                        <h2>Welcome to {name}'s Jeopardy question database! </h2> \r\n                    </div>\r\n\r\n                    <div className =\"main\">\r\n                            \r\n                        <div className=\"welcome\">\r\n                            <h2>About</h2> \r\n                            <p>Jeopardy has aired over 8,000 episodes since 1964. This webapp will allow you to\r\n                                browse the over 150,000 possible trivia questions that exist! There are many ways to filter\r\n                                your searches - you can find them all on the next page.\r\n                            </p>\r\n                            <div className=\"button\">\r\n                            <NavLink to=\"/SearchPage\"> Start Searching! </NavLink>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                            \r\n            </body>\r\n\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './SearchPage.css';\r\nexport default class SearchPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: null,\r\n            category: null,\r\n            minDate: null,\r\n            maxDate: null,\r\n            offset: null,\r\n        }\r\n    }\r\n    // calls ./app.js fetchResults method\r\n    handleSubmit = (event)=> {\r\n        event.preventDefault();\r\n        this.props.fetchResults(this.state.value, this.state.category, this.state.minDate, this.state.maxDate, this.state.offset); \r\n    };\r\n\r\n    handleInputChange = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <div className =\"main\">\r\n                        \r\n                    <div className=\"welcome\">\r\n                        <h2>Welcome to Amit's Jeopardy question database!</h2>\r\n                        <p><b>How does it work?</b><br/>\r\n                        Your options to filter are: <br/>\r\n                        The value of the question, the category id of the question, the minimum\r\n                        or maximum air date, and an offset for the returned clues.\r\n                        </p>\r\n                        <a href=\"http://jservice.io\"> Link to acceptable search formats </a>\r\n                        \r\n                    </div>\r\n\r\n\r\n                    {/* labels and input boxes */}\r\n                    <div className= \"filters\">\r\n                        <div className = \"value\">\r\n                            <label>Question Value</label>\r\n                            <input type=\"text\" name=\"value\" placeholder=\"1000\" onChange={this.handleInputChange}/>\r\n                        </div>\r\n\r\n                        <div className = \"category\">\r\n                            <label>Category  </label>\r\n                            <input type=\"text\" name=\"category\" placeholder=\"10,000\" onChange={this.handleInputChange}/>\r\n                        </div>\r\n                        {/*  I could be wrong, but I think the max and min functionalities of the API are swapped. \r\n                            //putting a max date yields only data after the specific date\r\n                            // ****Due to this, I will swap the labels ******  */}\r\n                        <div className = \"minDate\">\r\n                            <label>MaxDate </label>\r\n                            <input type=\"text\" name=\"minDate\" placeholder=\"2002-02-08\" onChange={this.handleInputChange}/>\r\n                        </div>\r\n\r\n                        <div className = \"maxDate\">\r\n                            <label>MinDate </label>\r\n                            <input type=\"text\" name=\"maxDate\" placeholder=\"2002-02-08\" onChange={this.handleInputChange}/>\r\n                        </div>\r\n\r\n                        <div className = \"offset\">\r\n                            <label>Offset </label>\r\n                            <input type=\"text\" name=\"offset\" placeholder=\"50\" onChange={this.handleInputChange}/>\r\n                        </div>\r\n                    </div>\r\n                    \r\n\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <p><button>Search</button></p>\r\n                    </form>\r\n            \r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './BuildResults.css'\r\n\r\n\r\nexport default class BuildResults extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            // table layout for the fetched results\r\n            <div className=\"Info\">\r\n                <table>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td><b> Difficulty</b> </td>\r\n                        <td>{this.props.Difficulty}</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td><b> Category</b></td>\r\n                        <td>{this.props.Category}</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td><b> Question</b></td>\r\n                        <td>{this.props.Question}</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td><b> Answer</b></td>\r\n                        <td>{this.props.Answer}</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td><b> Air Date</b></td>\r\n                        <td>{this.props.Air_Date.split(\"T\")[0]}</td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n            <hr/>\r\n            </div>\r\n            \r\n        )};\r\n}","import React from 'react';\r\nimport BuildResults from './BuildResults.js';\r\n\r\n\r\nconst Results = ({ results,minDate,maxDate }) => {\r\n    // initial render will be empty\r\n    if (results === 'none' || results === undefined || results === null) {\r\n        return null\r\n    }\r\n\r\n    // filters too specific\r\n    if (results.length === 0) {\r\n        return (\r\n            <p>No results - try broadening your search filters!</p>\r\n        )\r\n    }\r\n    return (\r\n        <ul>\r\n            {/* map array object and create BuildResult table for each fetched response */}\r\n            {results.map((result, i) => {\r\n                return (\r\n                    <BuildResults key={i} Difficulty={result.value} Category={result.category.title}\r\n                                 Question= {result.question} Answer={result.answer} Air_Date={(result.airdate+\"\").toString()}\r\n                                 ID={result.id} />    \r\n                )\r\n            })};\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Results;","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n// if user ends up on wrong URL, redirect to homepage\r\nconst Error = () => {\r\n        return (\r\n            <div>\r\n                <p>\r\n                   \r\n                    <NavLink to=\"/\"> This path doesn't exist! Take the link back to the homepage</NavLink>\r\n                </p>\r\n            </div>\r\n\r\n        )\r\n}\r\n\r\nexport default Error;","import React, {Component} from 'react';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport './App.css';\nimport Homepage from \"./components/Homepage\";\nimport SearchPage from \"./components/SearchPage\";\nimport Results from \"./components/Results\";\nimport Error from \"./components/Error\";\n\n\nexport default class App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      jsonData: null,\n      minDate: null,\n      maxDate: null,\n    }\n}\n\n  fetchResults = (value, category, minDate, maxDate, offset) => {\n\n    this.setState({\n      minDate: minDate,\n      maxDate: maxDate\n    });\n\n    // building the URL to visit through the API\n    //\n    let buildStr = \"https://cors-anywhere.herokuapp.com/http://jservice.io/api/clues\"\n\n    buildStr += \"?value=\"\n    if (value !== null && value !== \"\") {\n      buildStr += value;\n    }\n    buildStr += \"&category=\"\n    if (category !== null && category !== \"\") {\n      buildStr += category;\n    }\n    buildStr += \"&min_date=\"\n    if (minDate !== null && minDate !== \"\") {\n      buildStr += minDate\n    }\n    buildStr += \"&max_date=\"\n    if (maxDate !== null && maxDate !== \"\") {\n      buildStr += maxDate;\n    }\n\n\n    buildStr += \"&offset=\"\n    if (offset !== null && offset !== \"\") {\n      buildStr += offset;\n    }\n\n    console.log(buildStr);\n  \n\n    const fetch = require('node-fetch');\n    // go to API and grab filtered JSON\n    fetch(buildStr)\n      .then(res => res.json())\n      .then(d => {\n        this.setState({\n          jsonData: d\n        })\n      })\n      .catch(() => {\n        console.log(\"error\");\n      });\n      \n\n  }\n\n\n  render() {\n    return (\n      <HashRouter basename={process.env.PUBLIC_URL}>\n        <React.Fragment>\n          <Switch>\n            <Route path=\"/\" exact strict component={Homepage}/>\n            <Route path=\"/SearchPage\" exact render={(props) => (\n              <React.Fragment>\n                <SearchPage fetchResults={this.fetchResults}/>\n                <Results results={this.state.jsonData} minDate={this.state.minDate} maxDate={this.state.maxDate}/>\n                </React.Fragment>\n            )} />\n            <Route component={Error} />\n          </Switch>\n          </React.Fragment>\n      </HashRouter>\n\n\n    )\n  }\n\n\n\n\n\n\n\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}